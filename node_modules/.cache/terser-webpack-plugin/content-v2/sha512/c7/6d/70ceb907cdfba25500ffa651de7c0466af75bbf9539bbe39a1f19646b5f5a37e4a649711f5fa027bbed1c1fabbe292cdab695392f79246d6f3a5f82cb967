{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\src\\\\Contact\\\\Form.js\",\"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\src\\\\App.js\",\"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\src\\\\index.js\"],\"names\":[\"useStyles\",\"makeStyles\",\"theme\",\"container\",\"row\",\"alignItems\",\"justify\",\"display\",\"flexWrap\",\"margin\",\"textField\",\"marginTop\",\"spacing\",\"marginLeft\",\"marginRight\",\"width\",\"button\",\"rightIcon\",\"TextFieldMargins\",\"props\",\"classes\",\"_React$useState\",\"React\",\"useState\",\"_React$useState2\",\"Object\",\"slicedToArray\",\"name\",\"setName\",\"_React$useState3\",\"_React$useState4\",\"email\",\"setEmail\",\"_React$useState5\",\"_React$useState6\",\"message\",\"setMessage\",\"react_default\",\"a\",\"createElement\",\"className\",\"TextField\",\"variant\",\"label\",\"id\",\"placeholder\",\"helperText\",\"value\",\"onChange\",\"e\",\"target\",\"Button\",\"onClick\",\"preventDefault\",\"data\",\"test\",\"console\",\"log\",\"emailIsValid\",\"fetch\",\"method\",\"headers\",\"Accept\",\"Content-Type\",\"body\",\"JSON\",\"stringify\",\"then\",\"r\",\"json\",\"status\",\"obj\",\"color\",\"Icon\",\"App\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\r\\nimport { makeStyles } from '@material-ui/core/styles';\\r\\nimport TextField from '@material-ui/core/TextField';\\r\\nimport Button from '@material-ui/core/Button';\\r\\nimport Icon from '@material-ui/core/Icon';\\r\\n\\r\\nconst useStyles = makeStyles(theme => ({\\r\\n  container: {\\r\\n    row: 'center',\\r\\n    alignItems: 'center',\\r\\n    justify: 'center',\\r\\n    display: 'flex',\\r\\n    flexWrap: 'wrap',\\r\\n    margin: 'auto'\\r\\n  },\\r\\n  textField: {\\r\\n    marginTop: theme.spacing(1),\\r\\n    marginLeft: theme.spacing(5),\\r\\n    marginRight: theme.spacing(5),\\r\\n    width: 200,\\r\\n  },\\r\\n  button: {\\r\\n    margin: theme.spacing(5),\\r\\n  },\\r\\n  rightIcon: {\\r\\n    marginLeft: theme.spacing(1),\\r\\n  }\\r\\n}));\\r\\n\\r\\nfunction emailIsValid (email) {\\r\\n  if (/\\\\S+@\\\\S+\\\\.\\\\S+/.test(email) !== true ) {\\r\\n    console.log(\\\"invalid email\\\")\\r\\n  }\\r\\n} //apply this\\r\\n\\r\\nexport default function TextFieldMargins(props) {\\r\\n  const classes = useStyles();\\r\\n\\r\\n  const [name, setName] = React.useState(\\\"\\\");\\r\\n  const [email, setEmail] = React.useState(\\\"\\\");\\r\\n  const [message, setMessage] = React.useState(\\\"\\\");\\r\\n\\r\\n  function handleSubmit(e) {\\r\\n    e.preventDefault();\\r\\n    const data = {name, email, message}\\r\\n    emailIsValid(email)\\r\\n\\r\\n    fetch('https://excorb1092.execute-api.us-east-2.amazonaws.com/beta/myRestService', {\\r\\n    method: 'POST',\\r\\n    headers: {\\r\\n    Accept: 'application/json',\\r\\n    'Content-Type': 'application/json',\\r\\n  },\\r\\n  body: JSON.stringify({data}),\\r\\n}).then(r =>  r.json()\\r\\n  .then(data => ({status: r.status, body: data})))\\r\\n  .then(obj => console.log(obj));\\r\\n  }\\r\\n\\r\\nreturn ( \\r\\n<div className=\\\"blackbox\\\">\\r\\n  <h1 className=\\\"h1m\\\"> Please leave us a message!</h1>\\r\\n  <div className=\\\"formbox\\\">\\r\\n    <div className={classes.container}>\\r\\n      <TextField   \\r\\n        variant=\\\"outlined\\\"\\r\\n        label=\\\"Name\\\"\\r\\n        id=\\\"Name_field\\\"\\r\\n        placeholder=\\\"Please enter your name\\\"\\r\\n        className={classes.textField}\\r\\n        helperText=\\\"Help us get to know you!\\\"\\r\\n        value={name}\\r\\n        onChange={e => setName(e.target.value)}\\r\\n      />\\r\\n      <TextField\\r\\n        variant=\\\"outlined\\\"\\r\\n        label=\\\"Email\\\"\\r\\n        id=\\\"Email_field\\\"\\r\\n        placeholder=\\\"Valid Email\\\"\\r\\n        className={classes.textField}\\r\\n        helperText=\\\"How can we reach you?\\\"\\r\\n        value={email}\\r\\n        onChange={e => setEmail(e.target.value)}\\r\\n      />\\r\\n      <TextField\\r\\n        variant=\\\"outlined\\\"\\r\\n        label=\\\"Message\\\"\\r\\n        id=\\\"Message_field\\\"\\r\\n        placeholder=\\\"Message\\\"\\r\\n        className={classes.textField}\\r\\n        helperText=\\\"What can we help you with?\\\"\\r\\n        value={message}\\r\\n        onChange={e => setMessage(e.target.value)}\\r\\n      />\\r\\n      <Button onClick={handleSubmit} variant=\\\"contained\\\" color=\\\"primary\\\" className={classes.button}>\\r\\n        Send\\r\\n        <Icon className={classes.rightIcon}>send</Icon>\\r\\n      </Button>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n);\\r\\n}\",\"import React from 'react';\\nimport TextFieldMargins from './Contact/Form';\\nimport './App.css';\\n\\nfunction App() {\\n  return (\\n    <div>\\n    <TextFieldMargins />\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{44:function(e,a,t){e.exports=t(64)},49:function(e,a,t){},63:function(e,a,t){},64:function(e,a,t){\"use strict\";t.r(a);var n=t(0),o=t.n(n),i=t(8),r=t.n(i),l=(t(49),t(33)),c=t(95),s=t(98),u=t(99),m=t(97),d=Object(c.a)(function(e){return{container:{row:\"center\",alignItems:\"center\",justify:\"center\",display:\"flex\",flexWrap:\"wrap\",margin:\"auto\"},textField:{marginTop:e.spacing(1),marginLeft:e.spacing(5),marginRight:e.spacing(5),width:200},button:{margin:e.spacing(5)},rightIcon:{marginLeft:e.spacing(1)}}});function g(e){var a=d(),t=o.a.useState(\"\"),n=Object(l.a)(t,2),i=n[0],r=n[1],c=o.a.useState(\"\"),g=Object(l.a)(c,2),h=g[0],p=g[1],f=o.a.useState(\"\"),v=Object(l.a)(f,2),w=v[0],b=v[1];return o.a.createElement(\"div\",{className:\"blackbox\"},o.a.createElement(\"h1\",{className:\"h1m\"},\" Please leave us a message!\"),o.a.createElement(\"div\",{className:\"formbox\"},o.a.createElement(\"div\",{className:a.container},o.a.createElement(s.a,{variant:\"outlined\",label:\"Name\",id:\"Name_field\",placeholder:\"Please enter your name\",className:a.textField,helperText:\"Help us get to know you!\",value:i,onChange:function(e){return r(e.target.value)}}),o.a.createElement(s.a,{variant:\"outlined\",label:\"Email\",id:\"Email_field\",placeholder:\"Valid Email\",className:a.textField,helperText:\"How can we reach you?\",value:h,onChange:function(e){return p(e.target.value)}}),o.a.createElement(s.a,{variant:\"outlined\",label:\"Message\",id:\"Message_field\",placeholder:\"Message\",className:a.textField,helperText:\"What can we help you with?\",value:w,onChange:function(e){return b(e.target.value)}}),o.a.createElement(u.a,{onClick:function(e){e.preventDefault();var a={name:i,email:h,message:w};!function(e){!0!==/\\S+@\\S+\\.\\S+/.test(e)&&console.log(\"invalid email\")}(h),fetch(\"https://excorb1092.execute-api.us-east-2.amazonaws.com/beta/myRestService\",{method:\"POST\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\"},body:JSON.stringify({data:a})}).then(function(e){return e.json().then(function(a){return{status:e.status,body:a}})}).then(function(e){return console.log(e)})},variant:\"contained\",color:\"primary\",className:a.button},\"Send\",o.a.createElement(m.a,{className:a.rightIcon},\"send\")))))}t(63);var h=function(){return o.a.createElement(\"div\",null,o.a.createElement(g,null))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(o.a.createElement(h,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[44,1,2]]]);","extractedComments":[]}