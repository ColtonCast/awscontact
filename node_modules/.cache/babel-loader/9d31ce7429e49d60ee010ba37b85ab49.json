{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\colto\\\\Desktop\\\\httpserver\\\\react\\\\home-server-aop\\\\src\\\\Contact\\\\snackbar.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  error: ErrorIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n\n  const className = props.className,\n        message = props.message,\n        onClose = props.onClose,\n        variant = props.variant,\n        other = _objectWithoutProperties(props, [\"className\", \"message\", \"onClose\", \"variant\"]);\n\n  const Icon = variantIcon[variant];\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'error']).isRequired\n};\nconst useStyles2 = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\nexport default function CustomizedSnackbars() {\n  const classes = useStyles2();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  function handleClick() {\n    setOpen(true);\n  }\n\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.margin,\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Open success snackbar\"), React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    open: open,\n    autoHideDuration: 5000,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(MySnackbarContentWrapper, {\n    onClose: handleClose,\n    variant: \"success\",\n    message: \"Message sent! Thank You!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(MySnackbarContentWrapper, {\n    variant: \"error\",\n    className: classes.margin,\n    message: \"invalid email!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:\\Users\\colto\\Desktop\\httpserver\\react\\home-server-aop\\src\\Contact\\snackbar.js"],"names":["React","PropTypes","clsx","Button","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","error","useStyles1","theme","backgroundColor","palette","dark","MySnackbarContentWrapper","props","classes","className","message","onClose","variant","other","Icon","propTypes","string","node","func","oneOf","isRequired","useStyles2","margin","spacing","CustomizedSnackbars","useState","open","setOpen","handleClick","handleClose","event","reason","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { amber, green } from '@material-ui/core/colors';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  error: ErrorIcon,\r\n};\r\n\r\nconst useStyles1 = makeStyles(theme => ({\r\n\r\n\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  }\r\n\r\n\r\n\r\n}));\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n  const classes = useStyles1();\r\n  const { className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n  className: PropTypes.string,\r\n  message: PropTypes.node,\r\n  onClose: PropTypes.func,\r\n  variant: PropTypes.oneOf(['success', 'error']).isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function CustomizedSnackbars() {\r\n  const classes = useStyles2();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  function handleClick() {\r\n    setOpen(true);\r\n  }\r\n\r\n  function handleClose(event, reason) {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" className={classes.margin} onClick={handleClick}>\r\n        Open success snackbar\r\n      </Button>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n        open={open}\r\n        autoHideDuration={5000}\r\n        onClose={handleClose}\r\n      >\r\n        <MySnackbarContentWrapper\r\n          onClose={handleClose}\r\n          variant=\"success\"\r\n          message=\"Message sent! Thank You!\"\r\n        />\r\n      </Snackbar>\r\n      <MySnackbarContentWrapper\r\n        variant=\"error\"\r\n        className={classes.margin}\r\n        message=\"invalid email!\"\r\n      />\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}